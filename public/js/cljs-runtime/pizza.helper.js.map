{"version":3,"sources":["pizza/helper.cljs"],"mappings":";AAEA,8BAAA,9BAAMA,oEAAWC;AAAjB,AACE,IAAAC,mBAAI,qGAAA,sHAAA,zNAAK,oCAAA,pCAACC,0BAAUF,2EACX,oCAAA,pCAACE,0BAAUF,4FACX,oCAAA,pCAACE,0BAAUF,iFACX,EAAI,wMAAA,xMAACG,6CAAE,AAACC,gDAAQ,AAAA,+FAAaJ,0EACzB,wMAAA,xMAACG,6CAAE,AAACC,gDAAQ,AAAA,+FAAaJ;AAJtC,AAAA,GAAAC;AAAAA;;AAKI,MAAO,KAAAI,MAAA;;;AAEb,mCAAA,nCAAOC,8EACJC;AADH,AAEE,iCAAA,zBAAG,AAACC,WAAc,CAAA,OAAMD;;AAE1B,2BAAA,3BAAOE,8DAAaF;AAApB,AACE,OAACG,WAAc,UAAA,VAAUH;;AAE3B,4BAAA,5BAAMI,gEACHX;AADH,AAEE,QAAG,AAAA,uFAASA,aAAO,AAAA,wGAAkBA;;AAEvC,yBAAA,zBAAMY,0DACHZ;AADH,AAEE,OAACM,iCAAoB,AAACG,yBAAY,CAAG,AAACE,0BAAaX,aAAO,AAAA,wGAAiBA;;AAE7E,0BAAA,1BAAMa,4DACHb;AADH,AAEE,wCAAA,0KAAKA,jJAEA,wCAAA,AAAA,vCAAG,AAACW,0BAAaX,pDACjBS,jCACAH;;AAEP,2BAAA,3BAAMQ,8DACHd;AADH,AAEE,IAAMe,eAAa,AAACX,gDAAQ,AAAA,+FAAaJ;AAAzC,AACE,wCAAA,iEAAK,yDAAA,mFAAA,5IAACgB,+CAAOhB,oJAAce,3OACtB,CAAG,AAACJ,0BAAaX,pDACjBS,jCACAH;;AAET,2BAAA,3BAAMW,8DACHjB;AADH,AAEE,OAACM,iCAAoB,AAACG,yBAAY,CAAG,AAACE,0BAAaX,aAAO,AAAA,2GAAmBA;;AAE/E,sCAAA,tCAAOkB,oFACJlB;AADH,AAEE,IAAMmB,aAAW,AAACN,wBAAWb;IACvBoB,cAAY,AAACN,yBAAYd;IACzBqB,YAAU,AAACT,uBAAUZ;IACrBsB,cAAY,AAACL,yBAAYjB;AAH/B,AAIE,QAAA,CAAA,CAAA,CAAG,AAACW,0BAAaX,aAAOmB,cAAWC,eAAYC,aAAUC;;AAE7D,2BAAA,3BAAMC,8DAAavB,UAAMwB;AAAzB,AACE,sCAAK,+GAAA,9GAAG,AAAA,iGAAcxB,tHACjB,CAAGwB,ZACHhB;;AAEP,sCAAA,tCAAMiB,oFACHzB;AADH,AAEE,oEAAK,yHAAA,xHAAG,CAAA,QAAO,AAAA,iGAAcA,7JACxB,CAAG,AAACkB,oCAAuBlB,hDAC3BQ;;AAEP,8BAAA,9BAAMkB,oEACH1B,UAAM2B;AADT,AAEE,OAACnB,WAAc,CAAG,AAAA,gHAAsBR,aAAO2B;;AAEjD,6BAAA,7BAAMC,kEAAe5B,UAAM6B;AAA3B,AACE,IAAMd,eAAa,AAACX,gDAAQyB;AAA5B,AACE,gEAAA,mFAAA,5IAACb,+CAAOhB,oJAAce,qBACd,kBAAA","names":["pizza.helper/validate!","pizza","or__5045__auto__","cljs.core/contains?","cljs.core._EQ_","cljs.core.keyword","js/Error","pizza.helper/round-first-decimal","n","js/Math.round","pizza.helper/fixed-float","js/parseFloat","pizza.helper/total-weight","pizza.helper/oil-grams","pizza.helper/salt-grams","pizza.helper/yeast-grams","yeast-type-k","cljs.core.get_in","pizza.helper/sugar-grams","pizza.helper/net-weight-water-flour","salt-grams","yeast-grams","oil-grams","sugar-grams","pizza.helper/water-grams","weight-reference","pizza.helper/flour-grams-all-flours","pizza.helper/semolina-grams","flour-grams-with-semolina","pizza.helper/yeast-by-type","yeast-type"],"sourcesContent":["(ns pizza.helper)\n\n(defn validate! [pizza]\n  (or (and (contains? pizza :number)\n           (contains? pizza :grams-per-pizza)\n           (contains? pizza :yeast-type)\n           (or (= (keyword (:yeast-type pizza)) :fresh)\n               (= (keyword (:yeast-type pizza)) :dry)))\n      (throw (js/Error. \"Argument Error: needs number, grams-per-pizza and yeast-type (:fresh or :dry)\"))))\n\n(defn- round-first-decimal\n  [n]\n  (/ (js/Math.round (* 10 n)) 10))\n\n(defn- fixed-float [n]\n  (js/parseFloat (.toFixed n 2)))\n\n(defn total-weight\n  [pizza]\n  (* (:number pizza) (:grams-per-pizza pizza)))\n\n(defn oil-grams\n  [pizza]\n  (round-first-decimal (fixed-float (* (total-weight pizza) (:oil-percentage pizza)))))\n\n(defn salt-grams\n  [pizza]\n  (->> pizza\n       :salt-percentage\n       (* (total-weight pizza))\n       fixed-float\n       round-first-decimal))\n\n(defn yeast-grams\n  [pizza]\n  (let [yeast-type-k (keyword (:yeast-type pizza))]\n    (->> (get-in pizza [:yeast yeast-type-k])\n         (* (total-weight pizza))\n         fixed-float\n         round-first-decimal)))\n\n(defn sugar-grams\n  [pizza]\n  (round-first-decimal (fixed-float (* (total-weight pizza) (:sugar-percentage pizza)))))\n\n(defn- net-weight-water-flour\n  [pizza]\n  (let [salt-grams (salt-grams pizza)\n        yeast-grams (yeast-grams pizza)\n        oil-grams (oil-grams pizza)\n        sugar-grams (sugar-grams pizza)]\n    (- (total-weight pizza) salt-grams yeast-grams oil-grams sugar-grams)))\n\n(defn water-grams [pizza weight-reference]\n  (->> (/ (:water-share pizza) 100)\n       (* weight-reference)\n       js/Math.round))\n\n(defn flour-grams-all-flours\n  [pizza]\n  (->> (/ (+ 100 (:water-share pizza)) 100)\n       (/ (net-weight-water-flour pizza))\n       js/Math.round))\n\n(defn semolina-grams\n  [pizza flour-grams-with-semolina]\n  (js/Math.round (* (:semolina-percentage pizza) flour-grams-with-semolina)))\n\n(defn yeast-by-type [pizza yeast-type]\n  (let [yeast-type-k (keyword yeast-type)]\n    (get-in pizza [:yeast yeast-type-k]\n            (throw \"Type of yeast not known!\"))))\n"]}