{"version":3,"sources":["pizza/core.cljs"],"mappings":";AASA,kBAAA,lBAAMA,4CACHC,WAAWC,OAAOC,gBAAgBC;AADrC,AAEE,IAAAC,WAAM,AAACG,gDAAQP;IAAfI,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACc,2CAAA,2CAAA,0FAAA,4EAAA,rPAACI,yJAA6BN,iFACLC,oEACJF;;;KAHnC;AAIY,uCAAA,2CAAA,0FAAA,4EAAA,jPAACQ,qJAA2BP,iFACLC,oEACJF;;;KAN/B;AAOY,uCAAA,2CAAA,0FAAA,4EAAA,jPAACS,qJAA2BR,iFACLC,oEACJF;;;KAT/B;AAUO,6BAAA,2CAAA,0FAAA,4EAAA,vOAACU,2IAAsBT,iFACLC,oEACJF;;;;AAZrB,MAAA,KAAAK,MAAA,CAAA,mEAAAF;;;;AAcF,0BAAA,1BAAMQ;AAAN,AACE,IAAAC,aAAA,AAAAC,gBAAoDK;IAApDN,iBAAA,AAAAE,4BAAAF;aAAA,AAAAG,4CAAAH,eAAA,pEAAcZ;sBAAd,AAAAe,4CAAAH,eAAA,7EAAqBX;YAArB,AAAAc,4CAAAH,eAAA,nEAAqCI;YAArC,AAAAD,4CAAAH,eAAA,nEAA2CK;AAA3C,2GACO,AAACnB,gBAAKkB,MAAMhB,OAAOC,gBAAgBgB,pFACnC,AAACE,pEACD,OAACC,sBAAc,uBAAA,vBAACC;;AAEzB,6BAAA,7BAAMC,kEAAYC,EAAEC;AAApB,AACE,OAACC,mDAAMP,iBAAGQ,gBAAM,AAACpB,gDAAQiB,GAAGC;;AAE9B,mBAAA,nBAAMG,8CACHC;AADH,AAEE,GAAI,oEAAA,pEAACC,gDAAK,AAAcC;AACtB,QAACF,mCAAAA,qCAAAA;;AACD,iCAAA,1BAAmBE,6CAA+BF;;;AAEtD,kBAAA,lBAAOG;AAAP,AACE,CAAM,AAAS,uBAAA,vBAACV,wCAAyB,AAAA,qFAAA,AAAAR,gBAASK;;AAClD,CAAM,AAAS,uBAAA,vBAACG,wCAAyB,AAAA,qFAAA,AAAAR,gBAASK;;AAClD,CAAM,AAAS,uBAAA,vBAACG,yCAA0B,AAAA,uFAAA,AAAAR,gBAAUK;;AACpD,CAAM,AAAS,uBAAA,vBAACG,wCAAyB,AAAA,wGAAA,AAAAR,gBAAmBK;;AAC5D,iDAAA,SAAA,1DAAmB,uBAAA,vBAACG;AAApB,AAC6B,kCAAA,3BAACC,kFAAkB,AAAS,AAACU,gBAAM,AAAmB,uBAAA,vBAACX;;;AACpF,kDAAA,QAAA,1DAAmB,uBAAA,vBAACA;AAApB,AAC4B,kCAAA,3BAACC,oFAAmB,0CAAA,zCAAK,AAAS,uBAAA,vBAACD;;;AAC/D,iDAAA,QAAA,zDAAmB,uBAAA,vBAACA;AAApB,AAC4B,kCAAA,3BAACC,qGAA4B,yCAAA,xCAAK,AAAS,uBAAA,vBAACD;;;AACxE,kDAAA,OAAA,zDAAmB,uBAAA,vBAACA;AAApB,AAC2B,kCAAA,3BAACC,oFAAmB,0CAAA,zCAAK,AAAS,uBAAA,vBAACD;;;AAC9D,iDAAA,OAAA,xDAAmB,uBAAA,vBAACA;AAApB,AAC2B,kCAAA,3BAACC,qGAA4B,yCAAA,xCAAK,AAAS,uBAAA,vBAACD;;;AACvE,iDAAA,SAAA,1DAAmB,uBAAA,vBAACA;AAApB,AAC6B,kCAAA,3BAACC,kFAAkB,AAAS,AAACU,gBAAM,AAAmB,uBAAA,vBAACX;;;AACpF,OAACV;;AAEH,kBAAA,lBAAMsB;AAAN,AACE,qCAAA,rCAACC,oBAAUhB,2EAAYP;;AACvB,OAACgB,iBAAMI","names":["pizza.core/bake","pizza-type","number","grams-per-pizza","yeast-type","G__17728","cljs.core/Keyword","js/Error","cljs.core.keyword","pizza.recipes.neapolitan/neapolitan","pizza.recipes.new-york/new-york","pizza.recipes.sicilian/sicilian","pizza.recipes.pan/pan","pizza.core/click-handle","map__17730","cljs.core/deref","cljs.core/--destructure-map","cljs.core.get","style","yeast","browser.store/db","templates.pizza.recipe/recipe-template","browser.dom/innerhtml","browser.dom/elem-by-id","pizza.core/update-db!","k","v","cljs.core.swap_BANG_","cljs.core/assoc","pizza.core/ready","fn","cljs.core.not_EQ_","js/document","pizza.core/main","cljs.core/first","pizza.core/init","cljs.core/add-watch"],"sourcesContent":["(ns pizza.core\n  (:require [browser.dom :as dom]\n            [browser.store :refer [db]]\n            [pizza.recipes.pan :refer [pan]]\n            [pizza.recipes.new-york :refer [new-york]]\n            [pizza.recipes.sicilian :refer [sicilian]]\n            [pizza.recipes.neapolitan :refer [neapolitan]]\n            [templates.pizza.recipe :refer [recipe-template]]))\n\n(defn bake\n  [pizza-type number grams-per-pizza yeast-type]\n  (case (keyword pizza-type)\n    :neapolitan (neapolitan {:grams-per-pizza grams-per-pizza\n                             :yeast-type yeast-type\n                             :number number})\n    :new-york (new-york {:grams-per-pizza grams-per-pizza\n                         :yeast-type yeast-type\n                         :number number})\n    :sicilian (sicilian {:grams-per-pizza grams-per-pizza\n                         :yeast-type yeast-type\n                         :number number})\n    :pan (pan {:grams-per-pizza grams-per-pizza\n               :yeast-type yeast-type\n               :number number})))\n\n(defn click-handle []\n  (let [{:keys [number grams-per-pizza style yeast]} @db]\n    (->> (bake style number grams-per-pizza yeast)\n         (recipe-template)\n         (dom/innerhtml (dom/elem-by-id \"pizza-recipe\")))))\n\n(defn update-db! [k v]\n  (swap! db assoc (keyword k) v))\n\n(defn ready\n  [fn]\n  (if (not= (.-readyState js/document) \"loading\")\n    (fn)\n    (.addEventListener js/document \"DOMContentLoaded\" fn)))\n\n(defn- main []\n  (set! (.-value (dom/elem-by-id \"style\")) (:style @db))\n  (set! (.-value (dom/elem-by-id \"yeast\")) (:yeast @db))\n  (set! (.-value (dom/elem-by-id \"number\")) (:number @db))\n  (set! (.-value (dom/elem-by-id \"grams\")) (:grams-per-pizza @db))\n  (.addEventListener (dom/elem-by-id \"style\")\n                     \"change\" #(update-db! :style (.-value (first (.-selectedOptions (dom/elem-by-id \"style\"))))))\n  (.addEventListener (dom/elem-by-id \"number\")\n                     \"keyup\" #(update-db! :number (int (.-value (dom/elem-by-id \"number\")))))\n  (.addEventListener (dom/elem-by-id \"grams\")\n                     \"keyup\" #(update-db! :grams-per-pizza (int (.-value (dom/elem-by-id \"grams\")))))\n  (.addEventListener (dom/elem-by-id \"number\")\n                     \"blur\" #(update-db! :number (int (.-value (dom/elem-by-id \"number\")))))\n  (.addEventListener (dom/elem-by-id \"grams\")\n                     \"blur\" #(update-db! :grams-per-pizza (int (.-value (dom/elem-by-id \"grams\")))))\n  (.addEventListener (dom/elem-by-id \"yeast\")\n                     \"change\" #(update-db! :yeast (.-value (first (.-selectedOptions (dom/elem-by-id \"yeast\"))))))\n  (click-handle))\n\n(defn init []\n  (add-watch db :trigger click-handle)\n  (ready main))\n"]}